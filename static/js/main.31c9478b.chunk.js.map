{"version":3,"sources":["components/PatientCard/PatientCard.js","components/Viewer/Viewer.js","App.js","serviceWorker.js","index.js"],"names":["PatientCard","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","onOpen","setState","isOpen","state","_this$props","props","patientId","name","village","contact","age","height","weight","parity","duration","medicalHistory","firstDate","preEclampsia","fetalSize","diastolic","systolic","coexistingConditions","secondDate","cmds","requiredFields","filedLabel","react_default","a","createElement","className","map","field","index","concat","onClick","React","Component","Viewer","patientInfo","_this2","url","fetch","method","then","res","json","console","log","_this$state","length","filter","patient","patientMedicalHistory","patientPreEclampsia","patientCoexistingConditions","history","components_PatientCard_PatientCard","assign","App","components_Viewer_Viewer","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.31c9478b.chunk.js","sourcesContent":["import React from \"react\";\nimport \"./PatientCard.scss\";\n\nclass PatientCard extends React.Component {\n  constructor() {\n    super();\n    this.state = { isOpen: false };\n  }\n  onOpen = () => {\n    this.setState({ isOpen: !this.state.isOpen });\n  };\n  render() {\n    const {\n      patientId,\n      name,\n      village,\n      contact,\n      age,\n      height,\n      weight,\n      parity,\n      duration,\n      medicalHistory,\n      firstDate,\n      preEclampsia,\n      fetalSize,\n      diastolic,\n      systolic,\n      coexistingConditions,\n      secondDate,\n      cmds\n    } = this.props;\n    const { isOpen } = this.state;\n    const requiredFields = [\n      patientId,\n      name,\n      village,\n      contact,\n      age,\n      height,\n      weight,\n      parity,\n      duration,\n      medicalHistory,\n      firstDate,\n      preEclampsia,\n      fetalSize,\n      diastolic,\n      systolic,\n      coexistingConditions,\n      secondDate,\n      cmds\n    ];\n    const filedLabel = [\n      \"patientId\",\n      \"name\",\n      \"village\",\n      \"contact\",\n      \"age\",\n      \"height\",\n      \"weight\",\n      \"parity\",\n      \"duration\",\n      \"medicalHistory\",\n      \"firstDate\",\n      \"preEclampsia\",\n      \"fetalSize\",\n      \"diastolic\",\n      \"systolic\",\n      \"coexistingConditions\",\n      \"secondDate\",\n      \"cmds\"\n    ];\n    return (\n      <div className=\"PatientCard\">\n        {name}\n        {isOpen &&\n          requiredFields.map((field, index) => (\n            <div>{`${filedLabel[index]}: ${field}`}</div>\n          ))}\n        <div onClick={this.onOpen}>{isOpen ? \"Less\" : \"More\"}</div>\n      </div>\n    );\n  }\n}\n\nexport default PatientCard;\n","import React, { Component } from \"react\";\nimport PatientCard from \"../PatientCard/PatientCard\";\n\nclass Viewer extends Component {\n  constructor(props) {\n    super(props);\n    this.state = { patientInfo: [] };\n  }\n  componentWillMount() {\n    // const url = \"http://192.168.0.13:3000/server.js/\";\n    const url =\n      \"https://cors-anywhere.herokuapp.com/http://ec2-18-219-82-149.us-east-2.compute.amazonaws.com:3000/server.js/\";\n    fetch(url + \"PatientInfo\", {\n      method: \"GET\"\n    })\n      .then(res => res.json())\n      .then(res => {\n        this.setState({ patientInfo: res });\n      });\n    fetch(url + \"MedicalHistory\", {\n      method: \"GET\"\n    })\n      .then(res => res.json())\n      .then(res => {\n        this.setState({ medicalHistory: res });\n      });\n    fetch(url + \"PreEclampsia\", {\n      method: \"GET\"\n    })\n      .then(res => res.json())\n      .then(res => {\n        console.log(res);\n        this.setState({ preEclampsia: res });\n      });\n    fetch(url + \"CoexistingConditions\", {\n      method: \"GET\"\n    })\n      .then(res => res.json())\n      .then(res => {\n        console.log(res);\n        this.setState({ coexistingConditions: res });\n      });\n  }\n  render() {\n    const {\n      patientInfo,\n      medicalHistory,\n      preEclampsia,\n      coexistingConditions\n    } = this.state;\n    return (\n      <div className=\"App\">\n        <div> CNIS Patient Viewer </div>\n        <div>{`There are ${patientInfo.length} registered patients`}</div>\n        {patientInfo\n          .filter(patient => patient.name)\n          .map(patient => {\n            let patientMedicalHistory = [];\n            let patientPreEclampsia = [];\n            let patientCoexistingConditions = [];\n            if (medicalHistory) {\n              patientMedicalHistory = medicalHistory\n                .filter(history => history.patientId === patient.patientId)\n                .map(history => history.medicalHistory);\n            }\n            if (preEclampsia) {\n              patientPreEclampsia = preEclampsia\n                .filter(history => history.patientId === patient.patientId)\n                .map(history => history.preEclampsia);\n            }\n            if (coexistingConditions) {\n              patientCoexistingConditions = coexistingConditions\n                .filter(history => history.patientId === patient.patientId)\n                .map(history => history.coexistingConditions);\n              console.log(patientCoexistingConditions);\n            }\n            return (\n              <PatientCard\n                {...patient}\n                medicalHistory={patientMedicalHistory}\n                preEclampsia={patientPreEclampsia}\n                coexistingConditions={patientCoexistingConditions}\n              />\n            );\n          })}\n      </div>\n    );\n  }\n}\n\nexport default Viewer;\n","import React from \"react\";\nimport Viewer from \"./components/Viewer/Viewer\";\n\nfunction App() {\n  return <Viewer />;\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}